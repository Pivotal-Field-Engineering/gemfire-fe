/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package io.pivotal.bds.metrics.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AvroMetric extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroMetric\",\"namespace\":\"io.pivotal.bds.metrics.avro\",\"fields\":[{\"name\":\"ts\",\"type\":\"long\"},{\"name\":\"tags\",\"type\":{\"type\":\"map\",\"values\":\"string\"}},{\"name\":\"values\",\"type\":{\"type\":\"map\",\"values\":\"double\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long ts;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> tags;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.Double> values;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public AvroMetric() {}

  /**
   * All-args constructor.
   */
  public AvroMetric(java.lang.Long ts, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> tags, java.util.Map<java.lang.CharSequence,java.lang.Double> values) {
    this.ts = ts;
    this.tags = tags;
    this.values = values;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ts;
    case 1: return tags;
    case 2: return values;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ts = (java.lang.Long)value$; break;
    case 1: tags = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    case 2: values = (java.util.Map<java.lang.CharSequence,java.lang.Double>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'ts' field.
   */
  public java.lang.Long getTs() {
    return ts;
  }

  /**
   * Sets the value of the 'ts' field.
   * @param value the value to set.
   */
  public void setTs(java.lang.Long value) {
    this.ts = value;
  }

  /**
   * Gets the value of the 'tags' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getTags() {
    return tags;
  }

  /**
   * Sets the value of the 'tags' field.
   * @param value the value to set.
   */
  public void setTags(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.tags = value;
  }

  /**
   * Gets the value of the 'values' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.Double> getValues() {
    return values;
  }

  /**
   * Sets the value of the 'values' field.
   * @param value the value to set.
   */
  public void setValues(java.util.Map<java.lang.CharSequence,java.lang.Double> value) {
    this.values = value;
  }

  /** Creates a new AvroMetric RecordBuilder */
  public static io.pivotal.bds.metrics.avro.AvroMetric.Builder newBuilder() {
    return new io.pivotal.bds.metrics.avro.AvroMetric.Builder();
  }
  
  /** Creates a new AvroMetric RecordBuilder by copying an existing Builder */
  public static io.pivotal.bds.metrics.avro.AvroMetric.Builder newBuilder(io.pivotal.bds.metrics.avro.AvroMetric.Builder other) {
    return new io.pivotal.bds.metrics.avro.AvroMetric.Builder(other);
  }
  
  /** Creates a new AvroMetric RecordBuilder by copying an existing AvroMetric instance */
  public static io.pivotal.bds.metrics.avro.AvroMetric.Builder newBuilder(io.pivotal.bds.metrics.avro.AvroMetric other) {
    return new io.pivotal.bds.metrics.avro.AvroMetric.Builder(other);
  }
  
  /**
   * RecordBuilder for AvroMetric instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroMetric>
    implements org.apache.avro.data.RecordBuilder<AvroMetric> {

    private long ts;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> tags;
    private java.util.Map<java.lang.CharSequence,java.lang.Double> values;

    /** Creates a new Builder */
    private Builder() {
      super(io.pivotal.bds.metrics.avro.AvroMetric.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(io.pivotal.bds.metrics.avro.AvroMetric.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ts)) {
        this.ts = data().deepCopy(fields()[0].schema(), other.ts);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tags)) {
        this.tags = data().deepCopy(fields()[1].schema(), other.tags);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.values)) {
        this.values = data().deepCopy(fields()[2].schema(), other.values);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing AvroMetric instance */
    private Builder(io.pivotal.bds.metrics.avro.AvroMetric other) {
            super(io.pivotal.bds.metrics.avro.AvroMetric.SCHEMA$);
      if (isValidValue(fields()[0], other.ts)) {
        this.ts = data().deepCopy(fields()[0].schema(), other.ts);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tags)) {
        this.tags = data().deepCopy(fields()[1].schema(), other.tags);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.values)) {
        this.values = data().deepCopy(fields()[2].schema(), other.values);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'ts' field */
    public java.lang.Long getTs() {
      return ts;
    }
    
    /** Sets the value of the 'ts' field */
    public io.pivotal.bds.metrics.avro.AvroMetric.Builder setTs(long value) {
      validate(fields()[0], value);
      this.ts = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'ts' field has been set */
    public boolean hasTs() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'ts' field */
    public io.pivotal.bds.metrics.avro.AvroMetric.Builder clearTs() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'tags' field */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getTags() {
      return tags;
    }
    
    /** Sets the value of the 'tags' field */
    public io.pivotal.bds.metrics.avro.AvroMetric.Builder setTags(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[1], value);
      this.tags = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'tags' field has been set */
    public boolean hasTags() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'tags' field */
    public io.pivotal.bds.metrics.avro.AvroMetric.Builder clearTags() {
      tags = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'values' field */
    public java.util.Map<java.lang.CharSequence,java.lang.Double> getValues() {
      return values;
    }
    
    /** Sets the value of the 'values' field */
    public io.pivotal.bds.metrics.avro.AvroMetric.Builder setValues(java.util.Map<java.lang.CharSequence,java.lang.Double> value) {
      validate(fields()[2], value);
      this.values = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'values' field has been set */
    public boolean hasValues() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'values' field */
    public io.pivotal.bds.metrics.avro.AvroMetric.Builder clearValues() {
      values = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public AvroMetric build() {
      try {
        AvroMetric record = new AvroMetric();
        record.ts = fieldSetFlags()[0] ? this.ts : (java.lang.Long) defaultValue(fields()[0]);
        record.tags = fieldSetFlags()[1] ? this.tags : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[1]);
        record.values = fieldSetFlags()[2] ? this.values : (java.util.Map<java.lang.CharSequence,java.lang.Double>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
